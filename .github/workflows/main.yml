name: Build and Deploy Spring Boot App

on:
  push:
    branches:
      - laminef-deploy-dev-11/07/2025

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: dev_auth_user
          POSTGRES_PASSWORD: XqLJqqAsznWJa6JaLxcnvQ==
          POSTGRES_DB: dev_auth_db
        options: >-
          --health-cmd="pg_isready -U dev_auth_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0

      - name: "Set up archived Oracle JDK 21.0.4"
        uses: oracle-actions/setup-java@v1
        with:
          website: oracle.com
          release: 21
          version: 21.0.4

      - name: Set secrets as environment variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}" >> $GITHUB_ENV
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> $GITHUB_ENV

      - name: Set DB environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/dev_auth_db" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=dev_auth_user" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=XqLJqqAsznWJa6JaLxcnvQ==" >> $GITHUB_ENV
          echo "SPRING_PROFILES_ACTIVE=dev" >> $GITHUB_ENV

      - name: Build with Maven (dev profile)
        run: mvn clean package "-Dspring.profiles.active=dev" -DskipTests

      - name: Show the content of the target directory
        run: ls -l target

      - name: Save JAR file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: app_artifact
          path: target/*.jar

  deploy:
    needs: [build]
    if: ${{ github.ref == 'refs/heads/laminef-deploy-dev-11/07/2025' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app_artifact

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} *.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/olive_dev/microservices/auth-service/

      - name: Execute deployment script
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          ~/bin/deploy-service.sh auth-service /var/www/olive_dev/microservices/auth-service"

  restart:
    needs: [deploy]
    if: ${{ github.ref == 'refs/heads/laminef-deploy-dev-11/07/2025' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Restart auth-service via systemd
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          echo '=== Restarting auth-service via systemd ==='
          
          # Arrêter le service
          echo 'Stopping dev.auth.service...'
          sudo systemctl stop dev.auth.service || true
          
          # Recharger la configuration
          echo 'Reloading systemd daemon...'
          sudo systemctl daemon-reload
          
          # Démarrer le service
          echo 'Starting dev.auth.service...'
          sudo systemctl start dev.auth.service
          
          # Attendre le démarrage
          sleep 10
          
          # Vérifier le statut
          echo 'Service status:'
          sudo systemctl status dev.auth.service --no-pager --lines=0
          
          # Afficher les logs récents
          echo 'Recent logs:'
          sudo journalctl -u dev.auth.service --no-pager -n 15 --since '2 minutes ago'
          
          echo '=== Restart completed ==='
          "